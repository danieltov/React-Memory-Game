{"version":3,"sources":["components/Navbar.js","components/Card.js","MemoryGame.js","serviceWorker.js","index.js"],"names":["Navbar","_ref","onNewGame","score","react_default","a","createElement","className","href","id","onClick","Card","props","style","visible","backgroundImage","CardState","HIDDEN","VISIBLE","MATCHED","MemoryGame","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","cards","cardState","shuffle","state","noClick","handleClick","bind","assertThisInitialized","handleNewGame","_this2","mapCardState","idsToChange","newCardState","map","card","includes","objectSpread","foundCard","find","visibleCards","filter","ids","length","setState","hiddenCards","setTimeout","_this3","src_components_Card","key","src_components_Navbar","Component","Boolean","window","location","hostname","match","ReactDOM","render","MemoryGame_MemoryGame","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e2b79dd2.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Navbar.css';\n\nconst Navbar = ({ onNewGame, score }) => (\n  <nav>\n    <div className='nav-wrapper teal darken-2'>\n      <a href='#!' className='brand-logo'>\n        React Memory Game\n      </a>\n      <ul id='nav-mobile' className='right hide-on-med-and-down'>\n        <li>\n          <a href='#!'>Matched: {score}</a>\n        </li>\n        <li>\n          <a href='#!' onClick={onNewGame}>\n            New Game\n          </a>\n        </li>\n      </ul>\n    </div>\n  </nav>\n);\n\nNavbar.propTypes = {\n  onNewGame: PropTypes.func.isRequired,\n  score: PropTypes.number.isRequired\n};\n\nexport default Navbar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Card.css';\n\nconst Card = props => {\n  let style = {};\n\n  if (props.visible) style.backgroundImage = props.backgroundImage;\n\n  return (\n    <div className='card-container' style={style} onClick={props.onClick} />\n  );\n};\n\nCard.propTypes = {\n  visible: PropTypes.bool.isRequired,\n  backgroundImage: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired\n};\n\nexport default Card;\n","import React, { Component } from 'react';\nimport './MemoryGame.css';\nimport shuffle from 'shuffle-array';\nimport Navbar from './components/Navbar';\nimport Card from './components/Card';\n\n// * Create 3 CardStates - HIDDEN, VISIBLE, MATCHED\n\nconst CardState = {\n  HIDDEN: 0,\n  VISIBLE: 1,\n  MATCHED: 2\n};\n\nexport default class MemoryGame extends Component {\n  constructor(props) {\n    super(props);\n\n    // * Create cards to use in state\n    let cards = [\n      {\n        id: 0,\n        cardState: CardState.HIDDEN,\n        backgroundImage: 'linear-gradient(180deg, #FC466B 0%, #3F5EFB 100%)'\n      },\n      {\n        id: 1,\n        cardState: CardState.HIDDEN,\n        backgroundImage: 'linear-gradient(180deg, #FC466B 0%, #3F5EFB 100%)'\n      },\n      {\n        id: 2,\n        cardState: CardState.HIDDEN,\n        backgroundImage: 'linear-gradient(180deg, #d53369 0%, #daae51 100%)'\n      },\n      {\n        id: 3,\n        cardState: CardState.HIDDEN,\n        backgroundImage: 'linear-gradient(180deg, #d53369 0%, #daae51 100%)'\n      },\n      {\n        id: 4,\n        cardState: CardState.HIDDEN,\n        backgroundImage: 'linear-gradient(180deg, #0700b8 0%, #00ff88 100%)'\n      },\n      {\n        id: 5,\n        cardState: CardState.HIDDEN,\n        backgroundImage: 'linear-gradient(180deg, #0700b8 0%, #00ff88 100%)'\n      },\n      {\n        id: 6,\n        cardState: CardState.HIDDEN,\n        backgroundImage: 'linear-gradient(180deg, #00C9FF 0%, #92FE9D 100%)'\n      },\n      {\n        id: 7,\n        cardState: CardState.HIDDEN,\n        backgroundImage: 'linear-gradient(180deg, #00C9FF 0%, #92FE9D 100%)'\n      },\n      {\n        id: 8,\n        cardState: CardState.HIDDEN,\n        backgroundImage: 'linear-gradient(180deg, #9ebd13 0%, #008552 100%)'\n      },\n      {\n        id: 9,\n        cardState: CardState.HIDDEN,\n        backgroundImage: 'linear-gradient(180deg, #9ebd13 0%, #008552 100%)'\n      },\n      {\n        id: 10,\n        cardState: CardState.HIDDEN,\n        backgroundImage: 'linear-gradient(180deg, #3F2B96 0%, #A8C0FF 100%)'\n      },\n      {\n        id: 11,\n        cardState: CardState.HIDDEN,\n        backgroundImage: 'linear-gradient(180deg, #3F2B96 0%, #A8C0FF 100%)'\n      },\n      {\n        id: 12,\n        cardState: CardState.HIDDEN,\n        backgroundImage: 'linear-gradient(180deg, #fcff9e 0%, #c67700 100%)'\n      },\n      {\n        id: 13,\n        cardState: CardState.HIDDEN,\n        backgroundImage: 'linear-gradient(180deg, #fcff9e 0%, #c67700 100%)'\n      },\n      {\n        id: 14,\n        cardState: CardState.HIDDEN,\n        backgroundImage: 'linear-gradient(180deg, #1CB5E0 0%, #000851 100%)'\n      },\n      {\n        id: 15,\n        cardState: CardState.HIDDEN,\n        backgroundImage: 'linear-gradient(180deg, #1CB5E0 0%, #000851 100%)'\n      }\n    ];\n\n    cards = shuffle(cards);\n    this.state = { cards, noClick: false, score: 0 };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleNewGame = this.handleNewGame.bind(this);\n  }\n\n  handleClick(id) {\n    // ! Function that maps through cards and if card matches\n    // ! an ID to change, new state is given\n    const mapCardState = (cards, idsToChange, newCardState) => {\n      return cards.map(card => {\n        if (idsToChange.includes(card.id)) {\n          return {\n            ...card,\n            cardState: newCardState\n          };\n        }\n        return card;\n      });\n    };\n\n    // ! Function to find card that we want out of the array\n    const foundCard = this.state.cards.find(card => card.id === id);\n\n    // ! If clicked card is visible or matched, return\n    if (this.state.noClick || foundCard.cardState !== CardState.HIDDEN) return;\n\n    // ! If true, player can't click\n    let noClick = false;\n\n    // ! Map through cards by the click ID and change CardState of matched card to visible\n    let cards = mapCardState(this.state.cards, [id], CardState.VISIBLE);\n\n    // ! Filter cards array to return only visible cards\n    const visibleCards = cards.filter(\n      card => card.cardState === CardState.VISIBLE\n    );\n\n    // ! Get IDs of showing cards\n    const ids = visibleCards.map(card => card.id);\n\n    // * MATCHING LOGIC\n    // ! Check if two cards visible and if they match\n    if (\n      visibleCards.length === 2 &&\n      visibleCards[0].backgroundImage === visibleCards[1].backgroundImage\n    ) {\n      // ! IF they match, map through the visible cards and change their state to MATCHED\n      cards = mapCardState(cards, ids, CardState.MATCHED);\n      let score = this.state.score + 2;\n      this.setState({ score });\n    } else if (visibleCards.length === 2) {\n      // ! change to hiding if they don't match;\n      let hiddenCards = mapCardState(cards, ids, CardState.HIDDEN);\n      noClick = true;\n\n      // ! Set state to keep two cards showing...\n      this.setState({ cards, noClick }, () => {\n        setTimeout(() => {\n          // ! ...then set the state of the cards to HIDDEN after 1.3 seconds\n          this.setState({ cards: hiddenCards, noClick: false });\n        }, 1300);\n      });\n      return;\n    }\n\n    // ! This line will be reached if there's only one card showing\n    this.setState({ cards, noClick });\n  }\n\n  handleNewGame() {\n    // ! 1. Copy the state and set all the cards to HIDDEN\n    let cards = this.state.cards.map(card => ({\n      ...card,\n      cardState: CardState.HIDDEN\n    }));\n    // ! 2. Shuffle Cards\n    cards = shuffle(cards);\n    // ! 3. Set as new state.\n    this.setState({ cards });\n  }\n\n  render() {\n    // * Iterate over cards in state and return a Card component\n    const cards = this.state.cards.map(card => (\n      <Card\n        key={card.id}\n        // ! visible only true if not equal to HIDDEN\n        visible={card.cardState !== CardState.HIDDEN}\n        backgroundImage={card.backgroundImage}\n        onClick={() => {\n          this.handleClick(card.id);\n        }}\n      />\n    ));\n\n    // * return a Navbar + Cards\n    return (\n      <div>\n        <Navbar onNewGame={this.handleNewGame} score={this.state.score} />\n        <div className='game-wrapper'>{cards}</div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MemoryGame from './MemoryGame';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MemoryGame />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}